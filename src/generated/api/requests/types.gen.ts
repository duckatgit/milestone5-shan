// This file is auto-generated by @hey-api/openapi-ts

export type CreateCertDto = {
    domain: string;
};

export type CreateCertbotDto = {
    certificate: string;
    expiration: string;
    key: string;
};

export type AddUserToOrganizationRequestDto = {
    userEmail: string;
    roles?: 'Super Admin' | 'Admin' | 'Data Analyst' | 'Research Coordinator' | 'User';
};

export type roles = 'Super Admin' | 'Admin' | 'Data Analyst' | 'Research Coordinator' | 'User';

export type EditUserInOrganizationRequestDto = {
    roles: 'Super Admin' | 'Admin' | 'Data Analyst' | 'Research Coordinator' | 'User';
};

export type CreateOrganizationRequestDto = {
    domain: string;
    organizationName: string;
    organizationIDFileLink: string;
    governmentIDFileLink: string;
};

export type UpdateOrganizationRequestDto = {
    domain?: string;
    organizationName?: string;
    organizationIDFileLink?: string;
    governmentIDFileLink?: string;
};

export type DocumentReference = {
    [key: string]: unknown;
};

export type Organization = {
    createdBy: DocumentReference;
    organizationIDFileLink: string;
    governmentIDFileLink: string;
    isApproved: boolean;
    organizationName: string;
    emailDomain?: string;
    orchestrators?: {
        [key: string]: unknown;
    };
    users?: {
        [key: string]: unknown;
    };
    id: string;
    createTime?: string;
    updateTime?: string;
    readTime?: string;
    ref?: DocumentReference;
};

export type RoomDto = {
    id: string;
    label: string;
    description: string;
};

export type OrchestratorDto = {
    configured: boolean;
    id: string;
    ip?: string;
    label: string;
    port?: number;
    rooms?: Array<RoomDto>;
};

export type CreateOrchestratorDto = {
    label: string;
};

export type UpdateOrchestratorDto = {
    label?: string;
    ip?: string;
    port?: number;
};

export type OrchestratorConfigurationDto = {
    cert: string;
    key: string;
    natsConfig: string;
    orchestratorConfig: string;
};

export type OrchestratorVerifyLicenseDto = {
    key: string;
};

export type UserOrganizationDto = {
    id: string;
    organizationName: string;
};

export type GetOrganizationsResponse = {
    organizations: Array<UserOrganizationDto>;
};

export type UpdateUserRequestDto = {
    [key: string]: unknown;
};

export type UserOrganization = {
    ref: DocumentReference;
    role: string;
};

export type ContactInfo = {
    phone?: string;
    location?: string;
    city?: string;
    state?: string;
    address?: string;
    postalCode?: string;
};

export type User = {
    email: string;
    organizations?: Array<UserOrganization>;
    firstName?: string;
    lastName?: string;
    address?: Array<ContactInfo>;
    id: string;
    createTime?: string;
    updateTime?: string;
    readTime?: string;
    ref?: DocumentReference;
};

export type FetchUserResponseDto = {
    email: string;
    id: string;
    organizations: Array<(string)>;
    picture: string;
};

export type CreateRoomDto = {
    label: string;
    description: string;
};

export type Room = {
    devices?: Array<(string)>;
    label: string;
    description: string;
    id: string;
    createTime?: string;
    updateTime?: string;
    readTime?: string;
    ref?: DocumentReference;
};

export type Device = {
    room?: DocumentReference;
    key: string;
    deviceId: string;
    deleted?: boolean;
    deletedTime?: string;
    label?: string;
    token?: string;
    id: string;
    createTime?: string;
    updateTime?: string;
    readTime?: string;
    ref?: DocumentReference;
};

export type UpdateRoomDto = {
    [key: string]: unknown;
};

export type CreateDeviceDto = {
    deviceId: string;
    key: string;
    roomId?: string;
    label?: string;
};

export type NatsUserDto = {
    jwt: string;
    seed: string;
};

export type KeyResponseDto = {
    key: string;
};

export type UpdateDeviceDto = {
    deviceId?: string;
    key?: string;
    roomId?: string;
    label?: string;
};

export type CertControllerCreateData = {
    body: CreateCertDto;
};

export type CertControllerCreateResponse = (CreateCertbotDto);

export type CertControllerCreateError = unknown;

export type OrganizationControllerAddUserToOrganizationData = {
    body: AddUserToOrganizationRequestDto;
    path: {
        organizationId: string;
    };
};

export type OrganizationControllerAddUserToOrganizationResponse = (unknown);

export type OrganizationControllerAddUserToOrganizationError = unknown;

export type OrganizationControllerEditUserInOrganizationData = {
    body: EditUserInOrganizationRequestDto;
    path: {
        organizationId: string;
        userId: string;
    };
};

export type OrganizationControllerEditUserInOrganizationResponse = (unknown);

export type OrganizationControllerEditUserInOrganizationError = unknown;

export type OrganizationControllerRemoveUserFromOrganizationData = {
    path: {
        organizationId: string;
        userId: string;
    };
};

export type OrganizationControllerRemoveUserFromOrganizationResponse = (unknown);

export type OrganizationControllerRemoveUserFromOrganizationError = unknown;

export type OrganizationControllerRegisterData = {
    body: CreateOrganizationRequestDto;
};

export type OrganizationControllerRegisterResponse = (unknown);

export type OrganizationControllerRegisterError = unknown;

export type OrganizationControllerUpdateOrganizationData = {
    body: UpdateOrganizationRequestDto;
    path: {
        organizationId: string;
    };
};

export type OrganizationControllerUpdateOrganizationResponse = (unknown);

export type OrganizationControllerUpdateOrganizationError = unknown;

export type OrganizationControllerFindByIdData = {
    path: {
        organizationId: string;
    };
};

export type OrganizationControllerFindByIdResponse = (Organization);

export type OrganizationControllerFindByIdError = unknown;

export type OrganizationControllerRemoveOrganizationData = {
    path: {
        organizationId: string;
    };
};

export type OrganizationControllerRemoveOrganizationResponse = (unknown);

export type OrganizationControllerRemoveOrganizationError = unknown;

export type OrchestratorControllerFindOrchestratorsByOrgData = {
    path: {
        organizationId: string;
    };
    query?: {
        status?: 'AWAITING_SETUP' | 'READY';
    };
};

export type OrchestratorControllerFindOrchestratorsByOrgResponse = (Array<OrchestratorDto>);

export type OrchestratorControllerFindOrchestratorsByOrgError = unknown;

export type OrchestratorControllerAddOrchestratorData = {
    body: CreateOrchestratorDto;
    path: {
        organizationId: string;
    };
};

export type OrchestratorControllerAddOrchestratorResponse = (OrchestratorDto);

export type OrchestratorControllerAddOrchestratorError = unknown;

export type OrchestratorControllerFetchOrchestratorByIdData = {
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type OrchestratorControllerFetchOrchestratorByIdResponse = (OrchestratorDto);

export type OrchestratorControllerFetchOrchestratorByIdError = unknown;

export type OrchestratorControllerUpdateData = {
    body: UpdateOrchestratorDto;
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type OrchestratorControllerUpdateResponse = (unknown);

export type OrchestratorControllerUpdateError = unknown;

export type OrchestratorControllerDeleteData = {
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type OrchestratorControllerDeleteResponse = (unknown);

export type OrchestratorControllerDeleteError = unknown;

export type OrchestratorControllerFetchOrchestratorConfigData = {
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type OrchestratorControllerFetchOrchestratorConfigResponse = (OrchestratorConfigurationDto);

export type OrchestratorControllerFetchOrchestratorConfigError = unknown;

export type OrchestratorControllerFetchRoleForOrchestratorData = {
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type OrchestratorControllerFetchRoleForOrchestratorResponse = (string);

export type OrchestratorControllerFetchRoleForOrchestratorError = unknown;

export type OrchestratorLicenseControllerVerifyData = {
    body: OrchestratorVerifyLicenseDto;
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type OrchestratorLicenseControllerVerifyResponse = (unknown);

export type OrchestratorLicenseControllerVerifyError = unknown;

export type UserControllerUpdateClaimsResponse = (unknown);

export type UserControllerUpdateClaimsError = unknown;

export type UserControllerGetOrganizationsResponse = (GetOrganizationsResponse);

export type UserControllerGetOrganizationsError = unknown;

export type UserControllerUpdateUserData = {
    body: UpdateUserRequestDto;
    path: {
        id: string;
    };
};

export type UserControllerUpdateUserResponse = (User);

export type UserControllerUpdateUserError = unknown;

export type UserControllerFindByIdData = {
    path: {
        id: string;
    };
};

export type UserControllerFindByIdResponse = (FetchUserResponseDto);

export type UserControllerFindByIdError = unknown;

export type RoomControllerCreateData = {
    body: CreateRoomDto;
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type RoomControllerCreateResponse = (Room);

export type RoomControllerCreateError = unknown;

export type RoomControllerFindAllData = {
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type RoomControllerFindAllResponse = (Array<Room>);

export type RoomControllerFindAllError = unknown;

export type RoomControllerFindOneData = {
    path: {
        orchestratorId: string;
        organizationId: string;
        roomId: string;
    };
};

export type RoomControllerFindOneResponse = (Room);

export type RoomControllerFindOneError = unknown;

export type RoomControllerUpdateData = {
    body: UpdateRoomDto;
    path: {
        orchestratorId: string;
        organizationId: string;
        roomId: string;
    };
};

export type RoomControllerUpdateResponse = (Room);

export type RoomControllerUpdateError = unknown;

export type RoomControllerRemoveData = {
    path: {
        orchestratorId: string;
        organizationId: string;
        roomId: string;
    };
};

export type RoomControllerRemoveResponse = (unknown);

export type RoomControllerRemoveError = unknown;

export type RoomControllerFetchDevicesByRoomData = {
    path: {
        orchestratorId: string;
        organizationId: string;
        roomId: string;
    };
};

export type RoomControllerFetchDevicesByRoomResponse = (Array<Device>);

export type RoomControllerFetchDevicesByRoomError = unknown;

export type DeviceControllerCreateData = {
    body: CreateDeviceDto;
    path: {
        orchestratorId: string;
        organizationId: string;
    };
};

export type DeviceControllerCreateResponse = (NatsUserDto);

export type DeviceControllerCreateError = unknown;

export type DeviceControllerCreatedSignedRegistrationUrlData = {
    path: {
        orchestratorId: string;
        organizationId: string;
    };
    query: {
        deviceId: string;
        roomId: string;
    };
};

export type DeviceControllerCreatedSignedRegistrationUrlResponse = (KeyResponseDto);

export type DeviceControllerCreatedSignedRegistrationUrlError = unknown;

export type DeviceControllerFindOneData = {
    path: {
        id: string;
        orchestratorId: string;
        organizationId: string;
    };
};

export type DeviceControllerFindOneResponse = (Device);

export type DeviceControllerFindOneError = unknown;

export type DeviceControllerUpdateData = {
    body: UpdateDeviceDto;
    path: {
        id: string;
        orchestratorId: string;
        organizationId: string;
    };
};

export type DeviceControllerUpdateResponse = ({
    [key: string]: unknown;
});

export type DeviceControllerUpdateError = unknown;

export type DeviceControllerRemoveData = {
    path: {
        id: string;
        orchestratorId: string;
        organizationId: string;
    };
};

export type DeviceControllerRemoveResponse = (unknown);

export type DeviceControllerRemoveError = unknown;