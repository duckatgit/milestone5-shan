// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { UseQueryOptions, useSuspenseQuery } from "@tanstack/react-query";
import { deviceControllerCreatedSignedRegistrationUrl, deviceControllerFindOne, orchestratorControllerFetchOrchestratorById, orchestratorControllerFetchOrchestratorConfig, orchestratorControllerFetchRoleForOrchestrator, orchestratorControllerFindOrchestratorsByOrg, organizationControllerFindById, roomControllerFetchDevicesByRoom, roomControllerFindAll, roomControllerFindOne, userControllerFindById, userControllerGetOrganizations, userControllerUpdateClaims } from "../requests/services.gen";
import { DeviceControllerCreatedSignedRegistrationUrlData, DeviceControllerCreatedSignedRegistrationUrlError, DeviceControllerFindOneData, DeviceControllerFindOneError, OrchestratorControllerFetchOrchestratorByIdData, OrchestratorControllerFetchOrchestratorByIdError, OrchestratorControllerFetchOrchestratorConfigData, OrchestratorControllerFetchOrchestratorConfigError, OrchestratorControllerFetchRoleForOrchestratorData, OrchestratorControllerFetchRoleForOrchestratorError, OrchestratorControllerFindOrchestratorsByOrgData, OrchestratorControllerFindOrchestratorsByOrgError, OrganizationControllerFindByIdData, OrganizationControllerFindByIdError, RoomControllerFetchDevicesByRoomData, RoomControllerFetchDevicesByRoomError, RoomControllerFindAllData, RoomControllerFindAllError, RoomControllerFindOneData, RoomControllerFindOneError, UserControllerFindByIdData, UserControllerFindByIdError, UserControllerGetOrganizationsError, UserControllerUpdateClaimsError } from "../requests/types.gen";
import * as Common from "./common";
export const useOrganizationControllerFindByIdSuspense = <TData = Common.OrganizationControllerFindByIdDefaultResponse, TError = OrganizationControllerFindByIdError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrganizationControllerFindByIdData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseOrganizationControllerFindByIdKeyFn(clientOptions, queryKey), queryFn: () => organizationControllerFindById({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useOrchestratorControllerFindOrchestratorsByOrgSuspense = <TData = Common.OrchestratorControllerFindOrchestratorsByOrgDefaultResponse, TError = OrchestratorControllerFindOrchestratorsByOrgError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrchestratorControllerFindOrchestratorsByOrgData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseOrchestratorControllerFindOrchestratorsByOrgKeyFn(clientOptions, queryKey), queryFn: () => orchestratorControllerFindOrchestratorsByOrg({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useOrchestratorControllerFetchOrchestratorByIdSuspense = <TData = Common.OrchestratorControllerFetchOrchestratorByIdDefaultResponse, TError = OrchestratorControllerFetchOrchestratorByIdError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrchestratorControllerFetchOrchestratorByIdData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseOrchestratorControllerFetchOrchestratorByIdKeyFn(clientOptions, queryKey), queryFn: () => orchestratorControllerFetchOrchestratorById({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useOrchestratorControllerFetchOrchestratorConfigSuspense = <TData = Common.OrchestratorControllerFetchOrchestratorConfigDefaultResponse, TError = OrchestratorControllerFetchOrchestratorConfigError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrchestratorControllerFetchOrchestratorConfigData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseOrchestratorControllerFetchOrchestratorConfigKeyFn(clientOptions, queryKey), queryFn: () => orchestratorControllerFetchOrchestratorConfig({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useOrchestratorControllerFetchRoleForOrchestratorSuspense = <TData = Common.OrchestratorControllerFetchRoleForOrchestratorDefaultResponse, TError = OrchestratorControllerFetchRoleForOrchestratorError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrchestratorControllerFetchRoleForOrchestratorData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseOrchestratorControllerFetchRoleForOrchestratorKeyFn(clientOptions, queryKey), queryFn: () => orchestratorControllerFetchRoleForOrchestrator({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useUserControllerUpdateClaimsSuspense = <TData = Common.UserControllerUpdateClaimsDefaultResponse, TError = UserControllerUpdateClaimsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseUserControllerUpdateClaimsKeyFn(clientOptions, queryKey), queryFn: () => userControllerUpdateClaims({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useUserControllerGetOrganizationsSuspense = <TData = Common.UserControllerGetOrganizationsDefaultResponse, TError = UserControllerGetOrganizationsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseUserControllerGetOrganizationsKeyFn(clientOptions, queryKey), queryFn: () => userControllerGetOrganizations({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useUserControllerFindByIdSuspense = <TData = Common.UserControllerFindByIdDefaultResponse, TError = UserControllerFindByIdError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<UserControllerFindByIdData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseUserControllerFindByIdKeyFn(clientOptions, queryKey), queryFn: () => userControllerFindById({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useRoomControllerFindAllSuspense = <TData = Common.RoomControllerFindAllDefaultResponse, TError = RoomControllerFindAllError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<RoomControllerFindAllData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseRoomControllerFindAllKeyFn(clientOptions, queryKey), queryFn: () => roomControllerFindAll({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useRoomControllerFindOneSuspense = <TData = Common.RoomControllerFindOneDefaultResponse, TError = RoomControllerFindOneError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<RoomControllerFindOneData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseRoomControllerFindOneKeyFn(clientOptions, queryKey), queryFn: () => roomControllerFindOne({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useRoomControllerFetchDevicesByRoomSuspense = <TData = Common.RoomControllerFetchDevicesByRoomDefaultResponse, TError = RoomControllerFetchDevicesByRoomError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<RoomControllerFetchDevicesByRoomData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseRoomControllerFetchDevicesByRoomKeyFn(clientOptions, queryKey), queryFn: () => roomControllerFetchDevicesByRoom({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useDeviceControllerCreatedSignedRegistrationUrlSuspense = <TData = Common.DeviceControllerCreatedSignedRegistrationUrlDefaultResponse, TError = DeviceControllerCreatedSignedRegistrationUrlError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<DeviceControllerCreatedSignedRegistrationUrlData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseDeviceControllerCreatedSignedRegistrationUrlKeyFn(clientOptions, queryKey), queryFn: () => deviceControllerCreatedSignedRegistrationUrl({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useDeviceControllerFindOneSuspense = <TData = Common.DeviceControllerFindOneDefaultResponse, TError = DeviceControllerFindOneError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<DeviceControllerFindOneData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseDeviceControllerFindOneKeyFn(clientOptions, queryKey), queryFn: () => deviceControllerFindOne({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
