// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { UseMutationOptions, UseQueryOptions, useMutation, useQuery } from "@tanstack/react-query";
import { certControllerCreate, deviceControllerCreate, deviceControllerCreatedSignedRegistrationUrl, deviceControllerFindOne, deviceControllerRemove, deviceControllerUpdate, orchestratorControllerAddOrchestrator, orchestratorControllerDelete, orchestratorControllerFetchOrchestratorById, orchestratorControllerFetchOrchestratorConfig, orchestratorControllerFetchRoleForOrchestrator, orchestratorControllerFindOrchestratorsByOrg, orchestratorControllerUpdate, orchestratorLicenseControllerVerify, organizationControllerAddUserToOrganization, organizationControllerEditUserInOrganization, organizationControllerFindById, organizationControllerRegister, organizationControllerRemoveOrganization, organizationControllerRemoveUserFromOrganization, organizationControllerUpdateOrganization, roomControllerCreate, roomControllerFetchDevicesByRoom, roomControllerFindAll, roomControllerFindOne, roomControllerRemove, roomControllerUpdate, userControllerFindById, userControllerGetOrganizations, userControllerUpdateClaims, userControllerUpdateUser } from "../requests/services.gen";
import { CertControllerCreateData, CertControllerCreateError, DeviceControllerCreateData, DeviceControllerCreateError, DeviceControllerCreatedSignedRegistrationUrlData, DeviceControllerCreatedSignedRegistrationUrlError, DeviceControllerFindOneData, DeviceControllerFindOneError, DeviceControllerRemoveData, DeviceControllerRemoveError, DeviceControllerUpdateData, DeviceControllerUpdateError, OrchestratorControllerAddOrchestratorData, OrchestratorControllerAddOrchestratorError, OrchestratorControllerDeleteData, OrchestratorControllerDeleteError, OrchestratorControllerFetchOrchestratorByIdData, OrchestratorControllerFetchOrchestratorByIdError, OrchestratorControllerFetchOrchestratorConfigData, OrchestratorControllerFetchOrchestratorConfigError, OrchestratorControllerFetchRoleForOrchestratorData, OrchestratorControllerFetchRoleForOrchestratorError, OrchestratorControllerFindOrchestratorsByOrgData, OrchestratorControllerFindOrchestratorsByOrgError, OrchestratorControllerUpdateData, OrchestratorControllerUpdateError, OrchestratorLicenseControllerVerifyData, OrchestratorLicenseControllerVerifyError, OrganizationControllerAddUserToOrganizationData, OrganizationControllerAddUserToOrganizationError, OrganizationControllerEditUserInOrganizationData, OrganizationControllerEditUserInOrganizationError, OrganizationControllerFindByIdData, OrganizationControllerFindByIdError, OrganizationControllerRegisterData, OrganizationControllerRegisterError, OrganizationControllerRemoveOrganizationData, OrganizationControllerRemoveOrganizationError, OrganizationControllerRemoveUserFromOrganizationData, OrganizationControllerRemoveUserFromOrganizationError, OrganizationControllerUpdateOrganizationData, OrganizationControllerUpdateOrganizationError, RoomControllerCreateData, RoomControllerCreateError, RoomControllerFetchDevicesByRoomData, RoomControllerFetchDevicesByRoomError, RoomControllerFindAllData, RoomControllerFindAllError, RoomControllerFindOneData, RoomControllerFindOneError, RoomControllerRemoveData, RoomControllerRemoveError, RoomControllerUpdateData, RoomControllerUpdateError, UserControllerFindByIdData, UserControllerFindByIdError, UserControllerGetOrganizationsError, UserControllerUpdateClaimsError, UserControllerUpdateUserData, UserControllerUpdateUserError } from "../requests/types.gen";
import * as Common from "./common";
export const useOrganizationControllerFindById = <TData = Common.OrganizationControllerFindByIdDefaultResponse, TError = OrganizationControllerFindByIdError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrganizationControllerFindByIdData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseOrganizationControllerFindByIdKeyFn(clientOptions, queryKey), queryFn: () => organizationControllerFindById({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useOrchestratorControllerFindOrchestratorsByOrg = <TData = Common.OrchestratorControllerFindOrchestratorsByOrgDefaultResponse, TError = OrchestratorControllerFindOrchestratorsByOrgError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrchestratorControllerFindOrchestratorsByOrgData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseOrchestratorControllerFindOrchestratorsByOrgKeyFn(clientOptions, queryKey), queryFn: () => orchestratorControllerFindOrchestratorsByOrg({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useOrchestratorControllerFetchOrchestratorById = <TData = Common.OrchestratorControllerFetchOrchestratorByIdDefaultResponse, TError = OrchestratorControllerFetchOrchestratorByIdError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrchestratorControllerFetchOrchestratorByIdData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseOrchestratorControllerFetchOrchestratorByIdKeyFn(clientOptions, queryKey), queryFn: () => orchestratorControllerFetchOrchestratorById({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useOrchestratorControllerFetchOrchestratorConfig = <TData = Common.OrchestratorControllerFetchOrchestratorConfigDefaultResponse, TError = OrchestratorControllerFetchOrchestratorConfigError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrchestratorControllerFetchOrchestratorConfigData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseOrchestratorControllerFetchOrchestratorConfigKeyFn(clientOptions, queryKey), queryFn: () => orchestratorControllerFetchOrchestratorConfig({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useOrchestratorControllerFetchRoleForOrchestrator = <TData = Common.OrchestratorControllerFetchRoleForOrchestratorDefaultResponse, TError = OrchestratorControllerFetchRoleForOrchestratorError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<OrchestratorControllerFetchRoleForOrchestratorData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseOrchestratorControllerFetchRoleForOrchestratorKeyFn(clientOptions, queryKey), queryFn: () => orchestratorControllerFetchRoleForOrchestrator({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useUserControllerUpdateClaims = <TData = Common.UserControllerUpdateClaimsDefaultResponse, TError = UserControllerUpdateClaimsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseUserControllerUpdateClaimsKeyFn(clientOptions, queryKey), queryFn: () => userControllerUpdateClaims({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useUserControllerGetOrganizations = <TData = Common.UserControllerGetOrganizationsDefaultResponse, TError = UserControllerGetOrganizationsError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseUserControllerGetOrganizationsKeyFn(clientOptions, queryKey), queryFn: () => userControllerGetOrganizations({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useUserControllerFindById = <TData = Common.UserControllerFindByIdDefaultResponse, TError = UserControllerFindByIdError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<UserControllerFindByIdData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseUserControllerFindByIdKeyFn(clientOptions, queryKey), queryFn: () => userControllerFindById({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useRoomControllerFindAll = <TData = Common.RoomControllerFindAllDefaultResponse, TError = RoomControllerFindAllError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<RoomControllerFindAllData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseRoomControllerFindAllKeyFn(clientOptions, queryKey), queryFn: () => roomControllerFindAll({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useRoomControllerFindOne = <TData = Common.RoomControllerFindOneDefaultResponse, TError = RoomControllerFindOneError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<RoomControllerFindOneData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseRoomControllerFindOneKeyFn(clientOptions, queryKey), queryFn: () => roomControllerFindOne({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useRoomControllerFetchDevicesByRoom = <TData = Common.RoomControllerFetchDevicesByRoomDefaultResponse, TError = RoomControllerFetchDevicesByRoomError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<RoomControllerFetchDevicesByRoomData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseRoomControllerFetchDevicesByRoomKeyFn(clientOptions, queryKey), queryFn: () => roomControllerFetchDevicesByRoom({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useDeviceControllerCreatedSignedRegistrationUrl = <TData = Common.DeviceControllerCreatedSignedRegistrationUrlDefaultResponse, TError = DeviceControllerCreatedSignedRegistrationUrlError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<DeviceControllerCreatedSignedRegistrationUrlData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseDeviceControllerCreatedSignedRegistrationUrlKeyFn(clientOptions, queryKey), queryFn: () => deviceControllerCreatedSignedRegistrationUrl({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useDeviceControllerFindOne = <TData = Common.DeviceControllerFindOneDefaultResponse, TError = DeviceControllerFindOneError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<DeviceControllerFindOneData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useQuery<TData, TError>({ queryKey: Common.UseDeviceControllerFindOneKeyFn(clientOptions, queryKey), queryFn: () => deviceControllerFindOne({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useCertControllerCreate = <TData = Common.CertControllerCreateMutationResult, TError = CertControllerCreateError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<CertControllerCreateData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<CertControllerCreateData, true>, TContext>({ mutationKey: Common.UseCertControllerCreateKeyFn(mutationKey), mutationFn: clientOptions => certControllerCreate(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrganizationControllerAddUserToOrganization = <TData = Common.OrganizationControllerAddUserToOrganizationMutationResult, TError = OrganizationControllerAddUserToOrganizationError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrganizationControllerAddUserToOrganizationData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrganizationControllerAddUserToOrganizationData, true>, TContext>({ mutationKey: Common.UseOrganizationControllerAddUserToOrganizationKeyFn(mutationKey), mutationFn: clientOptions => organizationControllerAddUserToOrganization(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrganizationControllerRegister = <TData = Common.OrganizationControllerRegisterMutationResult, TError = OrganizationControllerRegisterError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrganizationControllerRegisterData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrganizationControllerRegisterData, true>, TContext>({ mutationKey: Common.UseOrganizationControllerRegisterKeyFn(mutationKey), mutationFn: clientOptions => organizationControllerRegister(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrchestratorControllerAddOrchestrator = <TData = Common.OrchestratorControllerAddOrchestratorMutationResult, TError = OrchestratorControllerAddOrchestratorError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrchestratorControllerAddOrchestratorData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrchestratorControllerAddOrchestratorData, true>, TContext>({ mutationKey: Common.UseOrchestratorControllerAddOrchestratorKeyFn(mutationKey), mutationFn: clientOptions => orchestratorControllerAddOrchestrator(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrchestratorLicenseControllerVerify = <TData = Common.OrchestratorLicenseControllerVerifyMutationResult, TError = OrchestratorLicenseControllerVerifyError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrchestratorLicenseControllerVerifyData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrchestratorLicenseControllerVerifyData, true>, TContext>({ mutationKey: Common.UseOrchestratorLicenseControllerVerifyKeyFn(mutationKey), mutationFn: clientOptions => orchestratorLicenseControllerVerify(clientOptions) as unknown as Promise<TData>, ...options });
export const useRoomControllerCreate = <TData = Common.RoomControllerCreateMutationResult, TError = RoomControllerCreateError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<RoomControllerCreateData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<RoomControllerCreateData, true>, TContext>({ mutationKey: Common.UseRoomControllerCreateKeyFn(mutationKey), mutationFn: clientOptions => roomControllerCreate(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeviceControllerCreate = <TData = Common.DeviceControllerCreateMutationResult, TError = DeviceControllerCreateError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeviceControllerCreateData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeviceControllerCreateData, true>, TContext>({ mutationKey: Common.UseDeviceControllerCreateKeyFn(mutationKey), mutationFn: clientOptions => deviceControllerCreate(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrganizationControllerEditUserInOrganization = <TData = Common.OrganizationControllerEditUserInOrganizationMutationResult, TError = OrganizationControllerEditUserInOrganizationError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrganizationControllerEditUserInOrganizationData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrganizationControllerEditUserInOrganizationData, true>, TContext>({ mutationKey: Common.UseOrganizationControllerEditUserInOrganizationKeyFn(mutationKey), mutationFn: clientOptions => organizationControllerEditUserInOrganization(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrganizationControllerUpdateOrganization = <TData = Common.OrganizationControllerUpdateOrganizationMutationResult, TError = OrganizationControllerUpdateOrganizationError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrganizationControllerUpdateOrganizationData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrganizationControllerUpdateOrganizationData, true>, TContext>({ mutationKey: Common.UseOrganizationControllerUpdateOrganizationKeyFn(mutationKey), mutationFn: clientOptions => organizationControllerUpdateOrganization(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrchestratorControllerUpdate = <TData = Common.OrchestratorControllerUpdateMutationResult, TError = OrchestratorControllerUpdateError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrchestratorControllerUpdateData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrchestratorControllerUpdateData, true>, TContext>({ mutationKey: Common.UseOrchestratorControllerUpdateKeyFn(mutationKey), mutationFn: clientOptions => orchestratorControllerUpdate(clientOptions) as unknown as Promise<TData>, ...options });
export const useUserControllerUpdateUser = <TData = Common.UserControllerUpdateUserMutationResult, TError = UserControllerUpdateUserError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<UserControllerUpdateUserData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<UserControllerUpdateUserData, true>, TContext>({ mutationKey: Common.UseUserControllerUpdateUserKeyFn(mutationKey), mutationFn: clientOptions => userControllerUpdateUser(clientOptions) as unknown as Promise<TData>, ...options });
export const useRoomControllerUpdate = <TData = Common.RoomControllerUpdateMutationResult, TError = RoomControllerUpdateError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<RoomControllerUpdateData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<RoomControllerUpdateData, true>, TContext>({ mutationKey: Common.UseRoomControllerUpdateKeyFn(mutationKey), mutationFn: clientOptions => roomControllerUpdate(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeviceControllerUpdate = <TData = Common.DeviceControllerUpdateMutationResult, TError = DeviceControllerUpdateError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeviceControllerUpdateData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeviceControllerUpdateData, true>, TContext>({ mutationKey: Common.UseDeviceControllerUpdateKeyFn(mutationKey), mutationFn: clientOptions => deviceControllerUpdate(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrganizationControllerRemoveUserFromOrganization = <TData = Common.OrganizationControllerRemoveUserFromOrganizationMutationResult, TError = OrganizationControllerRemoveUserFromOrganizationError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrganizationControllerRemoveUserFromOrganizationData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrganizationControllerRemoveUserFromOrganizationData, true>, TContext>({ mutationKey: Common.UseOrganizationControllerRemoveUserFromOrganizationKeyFn(mutationKey), mutationFn: clientOptions => organizationControllerRemoveUserFromOrganization(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrganizationControllerRemoveOrganization = <TData = Common.OrganizationControllerRemoveOrganizationMutationResult, TError = OrganizationControllerRemoveOrganizationError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrganizationControllerRemoveOrganizationData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrganizationControllerRemoveOrganizationData, true>, TContext>({ mutationKey: Common.UseOrganizationControllerRemoveOrganizationKeyFn(mutationKey), mutationFn: clientOptions => organizationControllerRemoveOrganization(clientOptions) as unknown as Promise<TData>, ...options });
export const useOrchestratorControllerDelete = <TData = Common.OrchestratorControllerDeleteMutationResult, TError = OrchestratorControllerDeleteError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<OrchestratorControllerDeleteData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<OrchestratorControllerDeleteData, true>, TContext>({ mutationKey: Common.UseOrchestratorControllerDeleteKeyFn(mutationKey), mutationFn: clientOptions => orchestratorControllerDelete(clientOptions) as unknown as Promise<TData>, ...options });
export const useRoomControllerRemove = <TData = Common.RoomControllerRemoveMutationResult, TError = RoomControllerRemoveError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<RoomControllerRemoveData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<RoomControllerRemoveData, true>, TContext>({ mutationKey: Common.UseRoomControllerRemoveKeyFn(mutationKey), mutationFn: clientOptions => roomControllerRemove(clientOptions) as unknown as Promise<TData>, ...options });
export const useDeviceControllerRemove = <TData = Common.DeviceControllerRemoveMutationResult, TError = DeviceControllerRemoveError, TQueryKey extends Array<unknown> = unknown[], TContext = unknown>(mutationKey?: TQueryKey, options?: Omit<UseMutationOptions<TData, TError, Options<DeviceControllerRemoveData, true>, TContext>, "mutationKey" | "mutationFn">) => useMutation<TData, TError, Options<DeviceControllerRemoveData, true>, TContext>({ mutationKey: Common.UseDeviceControllerRemoveKeyFn(mutationKey), mutationFn: clientOptions => deviceControllerRemove(clientOptions) as unknown as Promise<TData>, ...options });
