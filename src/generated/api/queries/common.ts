// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { UseQueryResult } from "@tanstack/react-query";
import { certControllerCreate, deviceControllerCreate, deviceControllerCreatedSignedRegistrationUrl, deviceControllerFindOne, deviceControllerRemove, deviceControllerUpdate, orchestratorControllerAddOrchestrator, orchestratorControllerDelete, orchestratorControllerFetchOrchestratorById, orchestratorControllerFetchOrchestratorConfig, orchestratorControllerFetchRoleForOrchestrator, orchestratorControllerFindOrchestratorsByOrg, orchestratorControllerUpdate, orchestratorLicenseControllerVerify, organizationControllerAddUserToOrganization, organizationControllerEditUserInOrganization, organizationControllerFindById, organizationControllerRegister, organizationControllerRemoveOrganization, organizationControllerRemoveUserFromOrganization, organizationControllerUpdateOrganization, roomControllerCreate, roomControllerFetchDevicesByRoom, roomControllerFindAll, roomControllerFindOne, roomControllerRemove, roomControllerUpdate, userControllerFindById, userControllerGetOrganizations, userControllerUpdateClaims, userControllerUpdateUser } from "../requests/services.gen";
export type OrganizationControllerFindByIdDefaultResponse = Awaited<ReturnType<typeof organizationControllerFindById>>["data"];
export type OrganizationControllerFindByIdQueryResult<TData = OrganizationControllerFindByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useOrganizationControllerFindByIdKey = "OrganizationControllerFindById";
export const UseOrganizationControllerFindByIdKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useOrganizationControllerFindByIdKey, ...(queryKey ?? [clientOptions])];
export type OrchestratorControllerFindOrchestratorsByOrgDefaultResponse = Awaited<ReturnType<typeof orchestratorControllerFindOrchestratorsByOrg>>["data"];
export type OrchestratorControllerFindOrchestratorsByOrgQueryResult<TData = OrchestratorControllerFindOrchestratorsByOrgDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useOrchestratorControllerFindOrchestratorsByOrgKey = "OrchestratorControllerFindOrchestratorsByOrg";
export const UseOrchestratorControllerFindOrchestratorsByOrgKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useOrchestratorControllerFindOrchestratorsByOrgKey, ...(queryKey ?? [clientOptions])];
export type OrchestratorControllerFetchOrchestratorByIdDefaultResponse = Awaited<ReturnType<typeof orchestratorControllerFetchOrchestratorById>>["data"];
export type OrchestratorControllerFetchOrchestratorByIdQueryResult<TData = OrchestratorControllerFetchOrchestratorByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useOrchestratorControllerFetchOrchestratorByIdKey = "OrchestratorControllerFetchOrchestratorById";
export const UseOrchestratorControllerFetchOrchestratorByIdKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useOrchestratorControllerFetchOrchestratorByIdKey, ...(queryKey ?? [clientOptions])];
export type OrchestratorControllerFetchOrchestratorConfigDefaultResponse = Awaited<ReturnType<typeof orchestratorControllerFetchOrchestratorConfig>>["data"];
export type OrchestratorControllerFetchOrchestratorConfigQueryResult<TData = OrchestratorControllerFetchOrchestratorConfigDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useOrchestratorControllerFetchOrchestratorConfigKey = "OrchestratorControllerFetchOrchestratorConfig";
export const UseOrchestratorControllerFetchOrchestratorConfigKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useOrchestratorControllerFetchOrchestratorConfigKey, ...(queryKey ?? [clientOptions])];
export type OrchestratorControllerFetchRoleForOrchestratorDefaultResponse = Awaited<ReturnType<typeof orchestratorControllerFetchRoleForOrchestrator>>["data"];
export type OrchestratorControllerFetchRoleForOrchestratorQueryResult<TData = OrchestratorControllerFetchRoleForOrchestratorDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useOrchestratorControllerFetchRoleForOrchestratorKey = "OrchestratorControllerFetchRoleForOrchestrator";
export const UseOrchestratorControllerFetchRoleForOrchestratorKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useOrchestratorControllerFetchRoleForOrchestratorKey, ...(queryKey ?? [clientOptions])];
export type UserControllerUpdateClaimsDefaultResponse = Awaited<ReturnType<typeof userControllerUpdateClaims>>["data"];
export type UserControllerUpdateClaimsQueryResult<TData = UserControllerUpdateClaimsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useUserControllerUpdateClaimsKey = "UserControllerUpdateClaims";
export const UseUserControllerUpdateClaimsKeyFn = (clientOptions: Options<unknown, true> = {}, queryKey?: Array<unknown>) => [useUserControllerUpdateClaimsKey, ...(queryKey ?? [clientOptions])];
export type UserControllerGetOrganizationsDefaultResponse = Awaited<ReturnType<typeof userControllerGetOrganizations>>["data"];
export type UserControllerGetOrganizationsQueryResult<TData = UserControllerGetOrganizationsDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useUserControllerGetOrganizationsKey = "UserControllerGetOrganizations";
export const UseUserControllerGetOrganizationsKeyFn = (clientOptions: Options<unknown, true> = {}, queryKey?: Array<unknown>) => [useUserControllerGetOrganizationsKey, ...(queryKey ?? [clientOptions])];
export type UserControllerFindByIdDefaultResponse = Awaited<ReturnType<typeof userControllerFindById>>["data"];
export type UserControllerFindByIdQueryResult<TData = UserControllerFindByIdDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useUserControllerFindByIdKey = "UserControllerFindById";
export const UseUserControllerFindByIdKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useUserControllerFindByIdKey, ...(queryKey ?? [clientOptions])];
export type RoomControllerFindAllDefaultResponse = Awaited<ReturnType<typeof roomControllerFindAll>>["data"];
export type RoomControllerFindAllQueryResult<TData = RoomControllerFindAllDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRoomControllerFindAllKey = "RoomControllerFindAll";
export const UseRoomControllerFindAllKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useRoomControllerFindAllKey, ...(queryKey ?? [clientOptions])];
export type RoomControllerFindOneDefaultResponse = Awaited<ReturnType<typeof roomControllerFindOne>>["data"];
export type RoomControllerFindOneQueryResult<TData = RoomControllerFindOneDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRoomControllerFindOneKey = "RoomControllerFindOne";
export const UseRoomControllerFindOneKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useRoomControllerFindOneKey, ...(queryKey ?? [clientOptions])];
export type RoomControllerFetchDevicesByRoomDefaultResponse = Awaited<ReturnType<typeof roomControllerFetchDevicesByRoom>>["data"];
export type RoomControllerFetchDevicesByRoomQueryResult<TData = RoomControllerFetchDevicesByRoomDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useRoomControllerFetchDevicesByRoomKey = "RoomControllerFetchDevicesByRoom";
export const UseRoomControllerFetchDevicesByRoomKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useRoomControllerFetchDevicesByRoomKey, ...(queryKey ?? [clientOptions])];
export type DeviceControllerCreatedSignedRegistrationUrlDefaultResponse = Awaited<ReturnType<typeof deviceControllerCreatedSignedRegistrationUrl>>["data"];
export type DeviceControllerCreatedSignedRegistrationUrlQueryResult<TData = DeviceControllerCreatedSignedRegistrationUrlDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDeviceControllerCreatedSignedRegistrationUrlKey = "DeviceControllerCreatedSignedRegistrationUrl";
export const UseDeviceControllerCreatedSignedRegistrationUrlKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useDeviceControllerCreatedSignedRegistrationUrlKey, ...(queryKey ?? [clientOptions])];
export type DeviceControllerFindOneDefaultResponse = Awaited<ReturnType<typeof deviceControllerFindOne>>["data"];
export type DeviceControllerFindOneQueryResult<TData = DeviceControllerFindOneDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useDeviceControllerFindOneKey = "DeviceControllerFindOne";
export const UseDeviceControllerFindOneKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useDeviceControllerFindOneKey, ...(queryKey ?? [clientOptions])];
export type CertControllerCreateMutationResult = Awaited<ReturnType<typeof certControllerCreate>>;
export const useCertControllerCreateKey = "CertControllerCreate";
export const UseCertControllerCreateKeyFn = (mutationKey?: Array<unknown>) => [useCertControllerCreateKey, ...(mutationKey ?? [])];
export type OrganizationControllerAddUserToOrganizationMutationResult = Awaited<ReturnType<typeof organizationControllerAddUserToOrganization>>;
export const useOrganizationControllerAddUserToOrganizationKey = "OrganizationControllerAddUserToOrganization";
export const UseOrganizationControllerAddUserToOrganizationKeyFn = (mutationKey?: Array<unknown>) => [useOrganizationControllerAddUserToOrganizationKey, ...(mutationKey ?? [])];
export type OrganizationControllerRegisterMutationResult = Awaited<ReturnType<typeof organizationControllerRegister>>;
export const useOrganizationControllerRegisterKey = "OrganizationControllerRegister";
export const UseOrganizationControllerRegisterKeyFn = (mutationKey?: Array<unknown>) => [useOrganizationControllerRegisterKey, ...(mutationKey ?? [])];
export type OrchestratorControllerAddOrchestratorMutationResult = Awaited<ReturnType<typeof orchestratorControllerAddOrchestrator>>;
export const useOrchestratorControllerAddOrchestratorKey = "OrchestratorControllerAddOrchestrator";
export const UseOrchestratorControllerAddOrchestratorKeyFn = (mutationKey?: Array<unknown>) => [useOrchestratorControllerAddOrchestratorKey, ...(mutationKey ?? [])];
export type OrchestratorLicenseControllerVerifyMutationResult = Awaited<ReturnType<typeof orchestratorLicenseControllerVerify>>;
export const useOrchestratorLicenseControllerVerifyKey = "OrchestratorLicenseControllerVerify";
export const UseOrchestratorLicenseControllerVerifyKeyFn = (mutationKey?: Array<unknown>) => [useOrchestratorLicenseControllerVerifyKey, ...(mutationKey ?? [])];
export type RoomControllerCreateMutationResult = Awaited<ReturnType<typeof roomControllerCreate>>;
export const useRoomControllerCreateKey = "RoomControllerCreate";
export const UseRoomControllerCreateKeyFn = (mutationKey?: Array<unknown>) => [useRoomControllerCreateKey, ...(mutationKey ?? [])];
export type DeviceControllerCreateMutationResult = Awaited<ReturnType<typeof deviceControllerCreate>>;
export const useDeviceControllerCreateKey = "DeviceControllerCreate";
export const UseDeviceControllerCreateKeyFn = (mutationKey?: Array<unknown>) => [useDeviceControllerCreateKey, ...(mutationKey ?? [])];
export type OrganizationControllerEditUserInOrganizationMutationResult = Awaited<ReturnType<typeof organizationControllerEditUserInOrganization>>;
export const useOrganizationControllerEditUserInOrganizationKey = "OrganizationControllerEditUserInOrganization";
export const UseOrganizationControllerEditUserInOrganizationKeyFn = (mutationKey?: Array<unknown>) => [useOrganizationControllerEditUserInOrganizationKey, ...(mutationKey ?? [])];
export type OrganizationControllerUpdateOrganizationMutationResult = Awaited<ReturnType<typeof organizationControllerUpdateOrganization>>;
export const useOrganizationControllerUpdateOrganizationKey = "OrganizationControllerUpdateOrganization";
export const UseOrganizationControllerUpdateOrganizationKeyFn = (mutationKey?: Array<unknown>) => [useOrganizationControllerUpdateOrganizationKey, ...(mutationKey ?? [])];
export type OrchestratorControllerUpdateMutationResult = Awaited<ReturnType<typeof orchestratorControllerUpdate>>;
export const useOrchestratorControllerUpdateKey = "OrchestratorControllerUpdate";
export const UseOrchestratorControllerUpdateKeyFn = (mutationKey?: Array<unknown>) => [useOrchestratorControllerUpdateKey, ...(mutationKey ?? [])];
export type UserControllerUpdateUserMutationResult = Awaited<ReturnType<typeof userControllerUpdateUser>>;
export const useUserControllerUpdateUserKey = "UserControllerUpdateUser";
export const UseUserControllerUpdateUserKeyFn = (mutationKey?: Array<unknown>) => [useUserControllerUpdateUserKey, ...(mutationKey ?? [])];
export type RoomControllerUpdateMutationResult = Awaited<ReturnType<typeof roomControllerUpdate>>;
export const useRoomControllerUpdateKey = "RoomControllerUpdate";
export const UseRoomControllerUpdateKeyFn = (mutationKey?: Array<unknown>) => [useRoomControllerUpdateKey, ...(mutationKey ?? [])];
export type DeviceControllerUpdateMutationResult = Awaited<ReturnType<typeof deviceControllerUpdate>>;
export const useDeviceControllerUpdateKey = "DeviceControllerUpdate";
export const UseDeviceControllerUpdateKeyFn = (mutationKey?: Array<unknown>) => [useDeviceControllerUpdateKey, ...(mutationKey ?? [])];
export type OrganizationControllerRemoveUserFromOrganizationMutationResult = Awaited<ReturnType<typeof organizationControllerRemoveUserFromOrganization>>;
export const useOrganizationControllerRemoveUserFromOrganizationKey = "OrganizationControllerRemoveUserFromOrganization";
export const UseOrganizationControllerRemoveUserFromOrganizationKeyFn = (mutationKey?: Array<unknown>) => [useOrganizationControllerRemoveUserFromOrganizationKey, ...(mutationKey ?? [])];
export type OrganizationControllerRemoveOrganizationMutationResult = Awaited<ReturnType<typeof organizationControllerRemoveOrganization>>;
export const useOrganizationControllerRemoveOrganizationKey = "OrganizationControllerRemoveOrganization";
export const UseOrganizationControllerRemoveOrganizationKeyFn = (mutationKey?: Array<unknown>) => [useOrganizationControllerRemoveOrganizationKey, ...(mutationKey ?? [])];
export type OrchestratorControllerDeleteMutationResult = Awaited<ReturnType<typeof orchestratorControllerDelete>>;
export const useOrchestratorControllerDeleteKey = "OrchestratorControllerDelete";
export const UseOrchestratorControllerDeleteKeyFn = (mutationKey?: Array<unknown>) => [useOrchestratorControllerDeleteKey, ...(mutationKey ?? [])];
export type RoomControllerRemoveMutationResult = Awaited<ReturnType<typeof roomControllerRemove>>;
export const useRoomControllerRemoveKey = "RoomControllerRemove";
export const UseRoomControllerRemoveKeyFn = (mutationKey?: Array<unknown>) => [useRoomControllerRemoveKey, ...(mutationKey ?? [])];
export type DeviceControllerRemoveMutationResult = Awaited<ReturnType<typeof deviceControllerRemove>>;
export const useDeviceControllerRemoveKey = "DeviceControllerRemove";
export const UseDeviceControllerRemoveKeyFn = (mutationKey?: Array<unknown>) => [useDeviceControllerRemoveKey, ...(mutationKey ?? [])];
