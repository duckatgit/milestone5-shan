// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.3 

import { type Options } from "@hey-api/client-fetch";
import { type QueryClient } from "@tanstack/react-query";
import { deviceControllerCreatedSignedRegistrationUrl, deviceControllerFindOne, orchestratorControllerFetchOrchestratorById, orchestratorControllerFetchOrchestratorConfig, orchestratorControllerFetchRoleForOrchestrator, orchestratorControllerFindOrchestratorsByOrg, organizationControllerFindById, roomControllerFetchDevicesByRoom, roomControllerFindAll, roomControllerFindOne, userControllerFindById, userControllerGetOrganizations, userControllerUpdateClaims } from "../requests/services.gen";
import { DeviceControllerCreatedSignedRegistrationUrlData, DeviceControllerFindOneData, OrchestratorControllerFetchOrchestratorByIdData, OrchestratorControllerFetchOrchestratorConfigData, OrchestratorControllerFetchRoleForOrchestratorData, OrchestratorControllerFindOrchestratorsByOrgData, OrganizationControllerFindByIdData, RoomControllerFetchDevicesByRoomData, RoomControllerFindAllData, RoomControllerFindOneData, UserControllerFindByIdData } from "../requests/types.gen";
import * as Common from "./common";
export const prefetchUseOrganizationControllerFindById = (queryClient: QueryClient, clientOptions: Options<OrganizationControllerFindByIdData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseOrganizationControllerFindByIdKeyFn(clientOptions), queryFn: () => organizationControllerFindById({ ...clientOptions }).then(response => response.data) });
export const prefetchUseOrchestratorControllerFindOrchestratorsByOrg = (queryClient: QueryClient, clientOptions: Options<OrchestratorControllerFindOrchestratorsByOrgData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseOrchestratorControllerFindOrchestratorsByOrgKeyFn(clientOptions), queryFn: () => orchestratorControllerFindOrchestratorsByOrg({ ...clientOptions }).then(response => response.data) });
export const prefetchUseOrchestratorControllerFetchOrchestratorById = (queryClient: QueryClient, clientOptions: Options<OrchestratorControllerFetchOrchestratorByIdData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseOrchestratorControllerFetchOrchestratorByIdKeyFn(clientOptions), queryFn: () => orchestratorControllerFetchOrchestratorById({ ...clientOptions }).then(response => response.data) });
export const prefetchUseOrchestratorControllerFetchOrchestratorConfig = (queryClient: QueryClient, clientOptions: Options<OrchestratorControllerFetchOrchestratorConfigData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseOrchestratorControllerFetchOrchestratorConfigKeyFn(clientOptions), queryFn: () => orchestratorControllerFetchOrchestratorConfig({ ...clientOptions }).then(response => response.data) });
export const prefetchUseOrchestratorControllerFetchRoleForOrchestrator = (queryClient: QueryClient, clientOptions: Options<OrchestratorControllerFetchRoleForOrchestratorData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseOrchestratorControllerFetchRoleForOrchestratorKeyFn(clientOptions), queryFn: () => orchestratorControllerFetchRoleForOrchestrator({ ...clientOptions }).then(response => response.data) });
export const prefetchUseUserControllerUpdateClaims = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseUserControllerUpdateClaimsKeyFn(clientOptions), queryFn: () => userControllerUpdateClaims({ ...clientOptions }).then(response => response.data) });
export const prefetchUseUserControllerGetOrganizations = (queryClient: QueryClient, clientOptions: Options<unknown, true> = {}) => queryClient.prefetchQuery({ queryKey: Common.UseUserControllerGetOrganizationsKeyFn(clientOptions), queryFn: () => userControllerGetOrganizations({ ...clientOptions }).then(response => response.data) });
export const prefetchUseUserControllerFindById = (queryClient: QueryClient, clientOptions: Options<UserControllerFindByIdData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseUserControllerFindByIdKeyFn(clientOptions), queryFn: () => userControllerFindById({ ...clientOptions }).then(response => response.data) });
export const prefetchUseRoomControllerFindAll = (queryClient: QueryClient, clientOptions: Options<RoomControllerFindAllData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseRoomControllerFindAllKeyFn(clientOptions), queryFn: () => roomControllerFindAll({ ...clientOptions }).then(response => response.data) });
export const prefetchUseRoomControllerFindOne = (queryClient: QueryClient, clientOptions: Options<RoomControllerFindOneData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseRoomControllerFindOneKeyFn(clientOptions), queryFn: () => roomControllerFindOne({ ...clientOptions }).then(response => response.data) });
export const prefetchUseRoomControllerFetchDevicesByRoom = (queryClient: QueryClient, clientOptions: Options<RoomControllerFetchDevicesByRoomData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseRoomControllerFetchDevicesByRoomKeyFn(clientOptions), queryFn: () => roomControllerFetchDevicesByRoom({ ...clientOptions }).then(response => response.data) });
export const prefetchUseDeviceControllerCreatedSignedRegistrationUrl = (queryClient: QueryClient, clientOptions: Options<DeviceControllerCreatedSignedRegistrationUrlData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseDeviceControllerCreatedSignedRegistrationUrlKeyFn(clientOptions), queryFn: () => deviceControllerCreatedSignedRegistrationUrl({ ...clientOptions }).then(response => response.data) });
export const prefetchUseDeviceControllerFindOne = (queryClient: QueryClient, clientOptions: Options<DeviceControllerFindOneData, true>) => queryClient.prefetchQuery({ queryKey: Common.UseDeviceControllerFindOneKeyFn(clientOptions), queryFn: () => deviceControllerFindOne({ ...clientOptions }).then(response => response.data) });
